/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IAudioPlayer } from "./components/audio-player/types";
import { JSX } from "@stencil/core";
import { IDateTimePicker } from "./components/date-time-picker/types";
import { FolderSelectorProps, IFSObject } from "./model/FSObject";
import { ErrorFormatter, IBaseModel, IValidationError } from "./components/form-validator/types";
import { RouterHistory } from "@stencil/router";
import { ISlider } from "./components/slider/types";
import { ITreeView } from "./components/tree-view/types";
export namespace Components {
    interface AppRoot {
    }
    interface AudioPlayer {
        "config": IAudioPlayer.Config;
    }
    interface AutoCompleteInput {
        "inputProps": Record<string, any>;
        "itemRender": (value: string) => JSX.Element;
        "items": string[];
        "keepOpen": boolean;
        "multiSelect": boolean;
        "onChange": (value: string[]) => void;
        "onSelect": (value: string) => void;
        "singleLine": number;
        "suggestionRender": (value: string) => JSX.Element;
        "value": string | string[];
        "valueRender": (value: string) => JSX.Element;
    }
    interface BankInfo {
    }
    interface ContextMenu {
    }
    interface DateTimePicker {
        "config": Partial<IDateTimePicker.Config>;
        "onClose": () => void;
        "pickerMode": IDateTimePicker.PickerMode;
    }
    interface EventCalendar {
        "onMinimize": () => {};
    }
    interface FileDetail {
        "item": any;
    }
    interface FileExplorer {
    }
    interface FolderDetail {
        "item": IFSObject;
        "minimal": boolean;
        "onClose": () => void;
        "onSuccess": (item: IFSObject) => Promise<void>;
    }
    interface FolderSelect {
        "buttonName": FolderSelectorProps['buttonName'];
        "initFolderId": FolderSelectorProps['initFolderId'];
        "inputProps"?: FolderSelectorProps['inputProps'];
        "onClose": FolderSelectorProps['onClose'];
        "onSuccess": FolderSelectorProps['onSuccess'];
    }
    interface FormValidator {
        "autoDisable": boolean;
        "errorFormatter": ErrorFormatter;
        "errorSeparator": string;
        "fullWidth": boolean;
        "model": IBaseModel;
        "submit": (arg0: IBaseModel) => Promise<IBaseModel | void>;
        "validateAt": 'CHANGE' | 'SUBMIT';
    }
    interface FsIcon {
        "align": 'bottom' | 'right';
        "clickHandler": (item: IFSObject) => void;
        "color": 'default' | 'active' | 'warning' | 'error' | 'confirm';
        "editable": boolean;
        "fs": IFSObject;
        "height": string;
        "isActive"?: boolean;
        "isSelected"?: (id: string) => boolean;
        "label": string;
        "name": string;
        "onContextMenu": (event: MouseEvent, item?: IFSObject) => void;
        "onTitleChange": (newTitle: string, item?: IFSObject) => void;
        "selectHandler": (item: IFSObject) => void;
        "singlelinelabel"?: boolean;
        "size": 'small' | 'normal' | 'big';
        "width": string;
    }
    interface GuestManager {
        "onClose": () => void;
        "onSelect": (ids: string[]) => void;
        "selectedIds": string[];
    }
    interface HomePage {
    }
    interface LayoutCmp {
        "history": RouterHistory;
    }
    interface LoginPage {
    }
    interface MessengerCmp {
        "onMinimize": () => {};
    }
    interface NotifyContainer {
        "validation": Record<string, any>;
    }
    interface PanelManager {
    }
    interface SermonInfo {
    }
    interface SignupPage {
    }
    interface SliderContainer {
        "config": ISlider.Config;
    }
    interface SocialInfo {
    }
    interface TreeView {
        "config": ITreeView.Config;
    }
    interface UploaderContainer {
    }
    interface UserSelect {
        "keepOpen": boolean;
        "multiSelect": boolean;
        "onChanged": (value: string[]) => void;
        "value": string[];
    }
    interface YoutubeInfo {
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAudioPlayerElement extends Components.AudioPlayer, HTMLStencilElement {
    }
    var HTMLAudioPlayerElement: {
        prototype: HTMLAudioPlayerElement;
        new (): HTMLAudioPlayerElement;
    };
    interface HTMLAutoCompleteInputElement extends Components.AutoCompleteInput, HTMLStencilElement {
    }
    var HTMLAutoCompleteInputElement: {
        prototype: HTMLAutoCompleteInputElement;
        new (): HTMLAutoCompleteInputElement;
    };
    interface HTMLBankInfoElement extends Components.BankInfo, HTMLStencilElement {
    }
    var HTMLBankInfoElement: {
        prototype: HTMLBankInfoElement;
        new (): HTMLBankInfoElement;
    };
    interface HTMLContextMenuElement extends Components.ContextMenu, HTMLStencilElement {
    }
    var HTMLContextMenuElement: {
        prototype: HTMLContextMenuElement;
        new (): HTMLContextMenuElement;
    };
    interface HTMLDateTimePickerElement extends Components.DateTimePicker, HTMLStencilElement {
    }
    var HTMLDateTimePickerElement: {
        prototype: HTMLDateTimePickerElement;
        new (): HTMLDateTimePickerElement;
    };
    interface HTMLEventCalendarElement extends Components.EventCalendar, HTMLStencilElement {
    }
    var HTMLEventCalendarElement: {
        prototype: HTMLEventCalendarElement;
        new (): HTMLEventCalendarElement;
    };
    interface HTMLFileDetailElement extends Components.FileDetail, HTMLStencilElement {
    }
    var HTMLFileDetailElement: {
        prototype: HTMLFileDetailElement;
        new (): HTMLFileDetailElement;
    };
    interface HTMLFileExplorerElement extends Components.FileExplorer, HTMLStencilElement {
    }
    var HTMLFileExplorerElement: {
        prototype: HTMLFileExplorerElement;
        new (): HTMLFileExplorerElement;
    };
    interface HTMLFolderDetailElement extends Components.FolderDetail, HTMLStencilElement {
    }
    var HTMLFolderDetailElement: {
        prototype: HTMLFolderDetailElement;
        new (): HTMLFolderDetailElement;
    };
    interface HTMLFolderSelectElement extends Components.FolderSelect, HTMLStencilElement {
    }
    var HTMLFolderSelectElement: {
        prototype: HTMLFolderSelectElement;
        new (): HTMLFolderSelectElement;
    };
    interface HTMLFormValidatorElement extends Components.FormValidator, HTMLStencilElement {
    }
    var HTMLFormValidatorElement: {
        prototype: HTMLFormValidatorElement;
        new (): HTMLFormValidatorElement;
    };
    interface HTMLFsIconElement extends Components.FsIcon, HTMLStencilElement {
    }
    var HTMLFsIconElement: {
        prototype: HTMLFsIconElement;
        new (): HTMLFsIconElement;
    };
    interface HTMLGuestManagerElement extends Components.GuestManager, HTMLStencilElement {
    }
    var HTMLGuestManagerElement: {
        prototype: HTMLGuestManagerElement;
        new (): HTMLGuestManagerElement;
    };
    interface HTMLHomePageElement extends Components.HomePage, HTMLStencilElement {
    }
    var HTMLHomePageElement: {
        prototype: HTMLHomePageElement;
        new (): HTMLHomePageElement;
    };
    interface HTMLLayoutCmpElement extends Components.LayoutCmp, HTMLStencilElement {
    }
    var HTMLLayoutCmpElement: {
        prototype: HTMLLayoutCmpElement;
        new (): HTMLLayoutCmpElement;
    };
    interface HTMLLoginPageElement extends Components.LoginPage, HTMLStencilElement {
    }
    var HTMLLoginPageElement: {
        prototype: HTMLLoginPageElement;
        new (): HTMLLoginPageElement;
    };
    interface HTMLMessengerCmpElement extends Components.MessengerCmp, HTMLStencilElement {
    }
    var HTMLMessengerCmpElement: {
        prototype: HTMLMessengerCmpElement;
        new (): HTMLMessengerCmpElement;
    };
    interface HTMLNotifyContainerElement extends Components.NotifyContainer, HTMLStencilElement {
    }
    var HTMLNotifyContainerElement: {
        prototype: HTMLNotifyContainerElement;
        new (): HTMLNotifyContainerElement;
    };
    interface HTMLPanelManagerElement extends Components.PanelManager, HTMLStencilElement {
    }
    var HTMLPanelManagerElement: {
        prototype: HTMLPanelManagerElement;
        new (): HTMLPanelManagerElement;
    };
    interface HTMLSermonInfoElement extends Components.SermonInfo, HTMLStencilElement {
    }
    var HTMLSermonInfoElement: {
        prototype: HTMLSermonInfoElement;
        new (): HTMLSermonInfoElement;
    };
    interface HTMLSignupPageElement extends Components.SignupPage, HTMLStencilElement {
    }
    var HTMLSignupPageElement: {
        prototype: HTMLSignupPageElement;
        new (): HTMLSignupPageElement;
    };
    interface HTMLSliderContainerElement extends Components.SliderContainer, HTMLStencilElement {
    }
    var HTMLSliderContainerElement: {
        prototype: HTMLSliderContainerElement;
        new (): HTMLSliderContainerElement;
    };
    interface HTMLSocialInfoElement extends Components.SocialInfo, HTMLStencilElement {
    }
    var HTMLSocialInfoElement: {
        prototype: HTMLSocialInfoElement;
        new (): HTMLSocialInfoElement;
    };
    interface HTMLTreeViewElement extends Components.TreeView, HTMLStencilElement {
    }
    var HTMLTreeViewElement: {
        prototype: HTMLTreeViewElement;
        new (): HTMLTreeViewElement;
    };
    interface HTMLUploaderContainerElement extends Components.UploaderContainer, HTMLStencilElement {
    }
    var HTMLUploaderContainerElement: {
        prototype: HTMLUploaderContainerElement;
        new (): HTMLUploaderContainerElement;
    };
    interface HTMLUserSelectElement extends Components.UserSelect, HTMLStencilElement {
    }
    var HTMLUserSelectElement: {
        prototype: HTMLUserSelectElement;
        new (): HTMLUserSelectElement;
    };
    interface HTMLYoutubeInfoElement extends Components.YoutubeInfo, HTMLStencilElement {
    }
    var HTMLYoutubeInfoElement: {
        prototype: HTMLYoutubeInfoElement;
        new (): HTMLYoutubeInfoElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "audio-player": HTMLAudioPlayerElement;
        "auto-complete-input": HTMLAutoCompleteInputElement;
        "bank-info": HTMLBankInfoElement;
        "context-menu": HTMLContextMenuElement;
        "date-time-picker": HTMLDateTimePickerElement;
        "event-calendar": HTMLEventCalendarElement;
        "file-detail": HTMLFileDetailElement;
        "file-explorer": HTMLFileExplorerElement;
        "folder-detail": HTMLFolderDetailElement;
        "folder-select": HTMLFolderSelectElement;
        "form-validator": HTMLFormValidatorElement;
        "fs-icon": HTMLFsIconElement;
        "guest-manager": HTMLGuestManagerElement;
        "home-page": HTMLHomePageElement;
        "layout-cmp": HTMLLayoutCmpElement;
        "login-page": HTMLLoginPageElement;
        "messenger-cmp": HTMLMessengerCmpElement;
        "notify-container": HTMLNotifyContainerElement;
        "panel-manager": HTMLPanelManagerElement;
        "sermon-info": HTMLSermonInfoElement;
        "signup-page": HTMLSignupPageElement;
        "slider-container": HTMLSliderContainerElement;
        "social-info": HTMLSocialInfoElement;
        "tree-view": HTMLTreeViewElement;
        "uploader-container": HTMLUploaderContainerElement;
        "user-select": HTMLUserSelectElement;
        "youtube-info": HTMLYoutubeInfoElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface AudioPlayer {
        "config"?: IAudioPlayer.Config;
    }
    interface AutoCompleteInput {
        "inputProps"?: Record<string, any>;
        "itemRender"?: (value: string) => JSX.Element;
        "items"?: string[];
        "keepOpen"?: boolean;
        "multiSelect"?: boolean;
        "onChange"?: (value: string[]) => void;
        "onSelect"?: (value: string) => void;
        "singleLine"?: number;
        "suggestionRender"?: (value: string) => JSX.Element;
        "value"?: string | string[];
        "valueRender"?: (value: string) => JSX.Element;
    }
    interface BankInfo {
    }
    interface ContextMenu {
    }
    interface DateTimePicker {
        "config"?: Partial<IDateTimePicker.Config>;
        "onClose"?: () => void;
        "pickerMode"?: IDateTimePicker.PickerMode;
    }
    interface EventCalendar {
        "onMinimize"?: () => {};
    }
    interface FileDetail {
        "item"?: any;
    }
    interface FileExplorer {
    }
    interface FolderDetail {
        "item"?: IFSObject;
        "minimal"?: boolean;
        "onClose"?: () => void;
        "onSuccess"?: (item: IFSObject) => Promise<void>;
    }
    interface FolderSelect {
        "buttonName"?: FolderSelectorProps['buttonName'];
        "initFolderId"?: FolderSelectorProps['initFolderId'];
        "inputProps"?: FolderSelectorProps['inputProps'];
        "onClose"?: FolderSelectorProps['onClose'];
        "onSuccess"?: FolderSelectorProps['onSuccess'];
    }
    interface FormValidator {
        "autoDisable"?: boolean;
        "errorFormatter"?: ErrorFormatter;
        "errorSeparator"?: string;
        "fullWidth"?: boolean;
        "model": IBaseModel;
        "submit": (arg0: IBaseModel) => Promise<IBaseModel | void>;
        "validateAt"?: 'CHANGE' | 'SUBMIT';
    }
    interface FsIcon {
        "align"?: 'bottom' | 'right';
        "clickHandler"?: (item: IFSObject) => void;
        "color"?: 'default' | 'active' | 'warning' | 'error' | 'confirm';
        "editable"?: boolean;
        "fs"?: IFSObject;
        "height"?: string;
        "isActive"?: boolean;
        "isSelected"?: (id: string) => boolean;
        "label"?: string;
        "name"?: string;
        "onContextMenu"?: (event: MouseEvent, item?: IFSObject) => void;
        "onTitleChange"?: (newTitle: string, item?: IFSObject) => void;
        "selectHandler"?: (item: IFSObject) => void;
        "singlelinelabel"?: boolean;
        "size"?: 'small' | 'normal' | 'big';
        "width"?: string;
    }
    interface GuestManager {
        "onClose"?: () => void;
        "onSelect"?: (ids: string[]) => void;
        "selectedIds"?: string[];
    }
    interface HomePage {
    }
    interface LayoutCmp {
        "history"?: RouterHistory;
    }
    interface LoginPage {
    }
    interface MessengerCmp {
        "onMinimize"?: () => {};
    }
    interface NotifyContainer {
        "validation"?: Record<string, any>;
    }
    interface PanelManager {
    }
    interface SermonInfo {
    }
    interface SignupPage {
    }
    interface SliderContainer {
        "config"?: ISlider.Config;
    }
    interface SocialInfo {
    }
    interface TreeView {
        "config"?: ITreeView.Config;
    }
    interface UploaderContainer {
    }
    interface UserSelect {
        "keepOpen"?: boolean;
        "multiSelect"?: boolean;
        "onChanged"?: (value: string[]) => void;
        "value"?: string[];
    }
    interface YoutubeInfo {
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "audio-player": AudioPlayer;
        "auto-complete-input": AutoCompleteInput;
        "bank-info": BankInfo;
        "context-menu": ContextMenu;
        "date-time-picker": DateTimePicker;
        "event-calendar": EventCalendar;
        "file-detail": FileDetail;
        "file-explorer": FileExplorer;
        "folder-detail": FolderDetail;
        "folder-select": FolderSelect;
        "form-validator": FormValidator;
        "fs-icon": FsIcon;
        "guest-manager": GuestManager;
        "home-page": HomePage;
        "layout-cmp": LayoutCmp;
        "login-page": LoginPage;
        "messenger-cmp": MessengerCmp;
        "notify-container": NotifyContainer;
        "panel-manager": PanelManager;
        "sermon-info": SermonInfo;
        "signup-page": SignupPage;
        "slider-container": SliderContainer;
        "social-info": SocialInfo;
        "tree-view": TreeView;
        "uploader-container": UploaderContainer;
        "user-select": UserSelect;
        "youtube-info": YoutubeInfo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "audio-player": LocalJSX.AudioPlayer & JSXBase.HTMLAttributes<HTMLAudioPlayerElement>;
            "auto-complete-input": LocalJSX.AutoCompleteInput & JSXBase.HTMLAttributes<HTMLAutoCompleteInputElement>;
            "bank-info": LocalJSX.BankInfo & JSXBase.HTMLAttributes<HTMLBankInfoElement>;
            "context-menu": LocalJSX.ContextMenu & JSXBase.HTMLAttributes<HTMLContextMenuElement>;
            "date-time-picker": LocalJSX.DateTimePicker & JSXBase.HTMLAttributes<HTMLDateTimePickerElement>;
            "event-calendar": LocalJSX.EventCalendar & JSXBase.HTMLAttributes<HTMLEventCalendarElement>;
            "file-detail": LocalJSX.FileDetail & JSXBase.HTMLAttributes<HTMLFileDetailElement>;
            "file-explorer": LocalJSX.FileExplorer & JSXBase.HTMLAttributes<HTMLFileExplorerElement>;
            "folder-detail": LocalJSX.FolderDetail & JSXBase.HTMLAttributes<HTMLFolderDetailElement>;
            "folder-select": LocalJSX.FolderSelect & JSXBase.HTMLAttributes<HTMLFolderSelectElement>;
            "form-validator": LocalJSX.FormValidator & JSXBase.HTMLAttributes<HTMLFormValidatorElement>;
            "fs-icon": LocalJSX.FsIcon & JSXBase.HTMLAttributes<HTMLFsIconElement>;
            "guest-manager": LocalJSX.GuestManager & JSXBase.HTMLAttributes<HTMLGuestManagerElement>;
            "home-page": LocalJSX.HomePage & JSXBase.HTMLAttributes<HTMLHomePageElement>;
            "layout-cmp": LocalJSX.LayoutCmp & JSXBase.HTMLAttributes<HTMLLayoutCmpElement>;
            "login-page": LocalJSX.LoginPage & JSXBase.HTMLAttributes<HTMLLoginPageElement>;
            "messenger-cmp": LocalJSX.MessengerCmp & JSXBase.HTMLAttributes<HTMLMessengerCmpElement>;
            "notify-container": LocalJSX.NotifyContainer & JSXBase.HTMLAttributes<HTMLNotifyContainerElement>;
            "panel-manager": LocalJSX.PanelManager & JSXBase.HTMLAttributes<HTMLPanelManagerElement>;
            "sermon-info": LocalJSX.SermonInfo & JSXBase.HTMLAttributes<HTMLSermonInfoElement>;
            "signup-page": LocalJSX.SignupPage & JSXBase.HTMLAttributes<HTMLSignupPageElement>;
            "slider-container": LocalJSX.SliderContainer & JSXBase.HTMLAttributes<HTMLSliderContainerElement>;
            "social-info": LocalJSX.SocialInfo & JSXBase.HTMLAttributes<HTMLSocialInfoElement>;
            "tree-view": LocalJSX.TreeView & JSXBase.HTMLAttributes<HTMLTreeViewElement>;
            "uploader-container": LocalJSX.UploaderContainer & JSXBase.HTMLAttributes<HTMLUploaderContainerElement>;
            "user-select": LocalJSX.UserSelect & JSXBase.HTMLAttributes<HTMLUserSelectElement>;
            "youtube-info": LocalJSX.YoutubeInfo & JSXBase.HTMLAttributes<HTMLYoutubeInfoElement>;
        }
    }
}
