/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IAudioPlayer } from "./components/audio-player/types";
import { IOption } from "./components/form-validator/autocomplete";
import { ICalendar } from "./components/event-calendar/types";
import { IFSObject } from "./components/file-explorer/model/FSObject";
import { IBaseModel, IValidationError } from "./components/form-validator/types";
import { IAvaliableNotifyTypes } from "./components/notify/types";
import { ISlider } from "./components/slider/types";
import { JSX } from "@stencil/core";
import { ITreeView } from "./components/tree-view/types";
import { IUploader } from "./components/uploader/types";
export namespace Components {
    interface AppRoot {
    }
    interface AudioPlayer {
        "canDrag": boolean;
        "list": {
        title: string;
        type: 'URL' | 'BLOB';
        url: string;
    }[];
    }
    interface AutoCompleteInput {
        "attrs": Record<string, any>;
        "onSelect": (value: string, label?: string) => void;
        "options": IOption[];
    }
    interface ContextMenu {
    }
    interface DetailView {
        "item": any;
    }
    interface EventCalendar {
        "draggable": boolean;
        "onDelete": (data: ICalendar.Event) => Promise<void>;
        "onMinimize": () => {};
        "onSave": (data: ICalendar.Event) => Promise<any>;
    }
    interface FileExplorer {
    }
    interface FolderView {
        "item": IFSObject;
        "minimal": boolean;
        "onClose": () => void;
        "onSuccess": (item: IFSObject) => Promise<void>;
    }
    interface FormValidator {
        "autoDisable": boolean;
        "errorFormatter": (errors: IValidationError[]) => string;
        "model": IBaseModel;
        "submit": (arg0: IBaseModel) => void;
        "validateAt": 'CHANGE' | 'SUBMIT';
    }
    interface FsIcon {
        "align": 'bottom' | 'right';
        "clickHandler": (item: IFSObject) => void;
        "editable": boolean;
        "fs": IFSObject;
        "height": string;
        "isSelected"?: (id: string) => boolean;
        "label": string;
        "name": string;
        "onTitleChange": (newTitle: string, item?: IFSObject) => void;
        "selectHandler": (item: IFSObject) => void;
        "size": 'small' | 'normal' | 'big';
        "width": string;
    }
    interface NotifyContainer {
        "send": (type: IAvaliableNotifyTypes, message: string) => Promise<void>;
        "validation": Record<string, any>;
    }
    interface PanelManager {
    }
    interface SliderContainer {
        "callback": (item: ISlider.Item) => void;
        "itemRender": (state: ISlider.Item) => JSX.Element;
        "items": ISlider.Item[];
        "ratio": string;
        "variant": ISlider.IVariant;
    }
    interface TreeView {
        "config": ITreeView.Config;
    }
    interface UploaderContainer {
        "upload": (config?: IUploader.Config) => Promise<void>;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAudioPlayerElement extends Components.AudioPlayer, HTMLStencilElement {
    }
    var HTMLAudioPlayerElement: {
        prototype: HTMLAudioPlayerElement;
        new (): HTMLAudioPlayerElement;
    };
    interface HTMLAutoCompleteInputElement extends Components.AutoCompleteInput, HTMLStencilElement {
    }
    var HTMLAutoCompleteInputElement: {
        prototype: HTMLAutoCompleteInputElement;
        new (): HTMLAutoCompleteInputElement;
    };
    interface HTMLContextMenuElement extends Components.ContextMenu, HTMLStencilElement {
    }
    var HTMLContextMenuElement: {
        prototype: HTMLContextMenuElement;
        new (): HTMLContextMenuElement;
    };
    interface HTMLDetailViewElement extends Components.DetailView, HTMLStencilElement {
    }
    var HTMLDetailViewElement: {
        prototype: HTMLDetailViewElement;
        new (): HTMLDetailViewElement;
    };
    interface HTMLEventCalendarElement extends Components.EventCalendar, HTMLStencilElement {
    }
    var HTMLEventCalendarElement: {
        prototype: HTMLEventCalendarElement;
        new (): HTMLEventCalendarElement;
    };
    interface HTMLFileExplorerElement extends Components.FileExplorer, HTMLStencilElement {
    }
    var HTMLFileExplorerElement: {
        prototype: HTMLFileExplorerElement;
        new (): HTMLFileExplorerElement;
    };
    interface HTMLFolderViewElement extends Components.FolderView, HTMLStencilElement {
    }
    var HTMLFolderViewElement: {
        prototype: HTMLFolderViewElement;
        new (): HTMLFolderViewElement;
    };
    interface HTMLFormValidatorElement extends Components.FormValidator, HTMLStencilElement {
    }
    var HTMLFormValidatorElement: {
        prototype: HTMLFormValidatorElement;
        new (): HTMLFormValidatorElement;
    };
    interface HTMLFsIconElement extends Components.FsIcon, HTMLStencilElement {
    }
    var HTMLFsIconElement: {
        prototype: HTMLFsIconElement;
        new (): HTMLFsIconElement;
    };
    interface HTMLNotifyContainerElement extends Components.NotifyContainer, HTMLStencilElement {
    }
    var HTMLNotifyContainerElement: {
        prototype: HTMLNotifyContainerElement;
        new (): HTMLNotifyContainerElement;
    };
    interface HTMLPanelManagerElement extends Components.PanelManager, HTMLStencilElement {
    }
    var HTMLPanelManagerElement: {
        prototype: HTMLPanelManagerElement;
        new (): HTMLPanelManagerElement;
    };
    interface HTMLSliderContainerElement extends Components.SliderContainer, HTMLStencilElement {
    }
    var HTMLSliderContainerElement: {
        prototype: HTMLSliderContainerElement;
        new (): HTMLSliderContainerElement;
    };
    interface HTMLTreeViewElement extends Components.TreeView, HTMLStencilElement {
    }
    var HTMLTreeViewElement: {
        prototype: HTMLTreeViewElement;
        new (): HTMLTreeViewElement;
    };
    interface HTMLUploaderContainerElement extends Components.UploaderContainer, HTMLStencilElement {
    }
    var HTMLUploaderContainerElement: {
        prototype: HTMLUploaderContainerElement;
        new (): HTMLUploaderContainerElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "audio-player": HTMLAudioPlayerElement;
        "auto-complete-input": HTMLAutoCompleteInputElement;
        "context-menu": HTMLContextMenuElement;
        "detail-view": HTMLDetailViewElement;
        "event-calendar": HTMLEventCalendarElement;
        "file-explorer": HTMLFileExplorerElement;
        "folder-view": HTMLFolderViewElement;
        "form-validator": HTMLFormValidatorElement;
        "fs-icon": HTMLFsIconElement;
        "notify-container": HTMLNotifyContainerElement;
        "panel-manager": HTMLPanelManagerElement;
        "slider-container": HTMLSliderContainerElement;
        "tree-view": HTMLTreeViewElement;
        "uploader-container": HTMLUploaderContainerElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface AudioPlayer {
        "canDrag"?: boolean;
        "list"?: {
        title: string;
        type: 'URL' | 'BLOB';
        url: string;
    }[];
    }
    interface AutoCompleteInput {
        "attrs"?: Record<string, any>;
        "onSelect"?: (value: string, label?: string) => void;
        "options"?: IOption[];
    }
    interface ContextMenu {
    }
    interface DetailView {
        "item"?: any;
    }
    interface EventCalendar {
        "draggable"?: boolean;
        "onDelete"?: (data: ICalendar.Event) => Promise<void>;
        "onMinimize"?: () => {};
        "onSave"?: (data: ICalendar.Event) => Promise<any>;
    }
    interface FileExplorer {
    }
    interface FolderView {
        "item"?: IFSObject;
        "minimal"?: boolean;
        "onClose"?: () => void;
        "onSuccess"?: (item: IFSObject) => Promise<void>;
    }
    interface FormValidator {
        "autoDisable"?: boolean;
        "errorFormatter"?: (errors: IValidationError[]) => string;
        "model": IBaseModel;
        "submit": (arg0: IBaseModel) => void;
        "validateAt"?: 'CHANGE' | 'SUBMIT';
    }
    interface FsIcon {
        "align"?: 'bottom' | 'right';
        "clickHandler"?: (item: IFSObject) => void;
        "editable"?: boolean;
        "fs"?: IFSObject;
        "height"?: string;
        "isSelected"?: (id: string) => boolean;
        "label"?: string;
        "name"?: string;
        "onTitleChange"?: (newTitle: string, item?: IFSObject) => void;
        "selectHandler"?: (item: IFSObject) => void;
        "size"?: 'small' | 'normal' | 'big';
        "width"?: string;
    }
    interface NotifyContainer {
        "validation"?: Record<string, any>;
    }
    interface PanelManager {
    }
    interface SliderContainer {
        "callback"?: (item: ISlider.Item) => void;
        "itemRender"?: (state: ISlider.Item) => JSX.Element;
        "items": ISlider.Item[];
        "ratio"?: string;
        "variant"?: ISlider.IVariant;
    }
    interface TreeView {
        "config"?: ITreeView.Config;
    }
    interface UploaderContainer {
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "audio-player": AudioPlayer;
        "auto-complete-input": AutoCompleteInput;
        "context-menu": ContextMenu;
        "detail-view": DetailView;
        "event-calendar": EventCalendar;
        "file-explorer": FileExplorer;
        "folder-view": FolderView;
        "form-validator": FormValidator;
        "fs-icon": FsIcon;
        "notify-container": NotifyContainer;
        "panel-manager": PanelManager;
        "slider-container": SliderContainer;
        "tree-view": TreeView;
        "uploader-container": UploaderContainer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "audio-player": LocalJSX.AudioPlayer & JSXBase.HTMLAttributes<HTMLAudioPlayerElement>;
            "auto-complete-input": LocalJSX.AutoCompleteInput & JSXBase.HTMLAttributes<HTMLAutoCompleteInputElement>;
            "context-menu": LocalJSX.ContextMenu & JSXBase.HTMLAttributes<HTMLContextMenuElement>;
            "detail-view": LocalJSX.DetailView & JSXBase.HTMLAttributes<HTMLDetailViewElement>;
            "event-calendar": LocalJSX.EventCalendar & JSXBase.HTMLAttributes<HTMLEventCalendarElement>;
            "file-explorer": LocalJSX.FileExplorer & JSXBase.HTMLAttributes<HTMLFileExplorerElement>;
            "folder-view": LocalJSX.FolderView & JSXBase.HTMLAttributes<HTMLFolderViewElement>;
            "form-validator": LocalJSX.FormValidator & JSXBase.HTMLAttributes<HTMLFormValidatorElement>;
            "fs-icon": LocalJSX.FsIcon & JSXBase.HTMLAttributes<HTMLFsIconElement>;
            "notify-container": LocalJSX.NotifyContainer & JSXBase.HTMLAttributes<HTMLNotifyContainerElement>;
            "panel-manager": LocalJSX.PanelManager & JSXBase.HTMLAttributes<HTMLPanelManagerElement>;
            "slider-container": LocalJSX.SliderContainer & JSXBase.HTMLAttributes<HTMLSliderContainerElement>;
            "tree-view": LocalJSX.TreeView & JSXBase.HTMLAttributes<HTMLTreeViewElement>;
            "uploader-container": LocalJSX.UploaderContainer & JSXBase.HTMLAttributes<HTMLUploaderContainerElement>;
        }
    }
}
